{"version":3,"sources":["App.js","components/custButton.js","serviceWorker.js","index.js"],"names":["App","props","reset","setState","display","previous","nextDisplay","addToDisplay","symbol","indexOf","state","push","calculate","length","eval","String","result","btn","col","action","this","className","type","value","map","b","i","key","cust_symbol","cust_col","cust_action","Component","custButton","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.40034ed5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Button from './components/custButton';\nimport './CSS/style.css';\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state={\n      display:'0',\n      previous: [],\n      result:'',\n      nextDisplay: false\n    };\n\n  }\n\n  reset = () => {\n    this.setState({display: '0',previous:[], nextDisplay:false });\n  }\n\n  addToDisplay = (symbol) =>{\n    if([\"/\",\"*\",\"+\",\"-\"].indexOf(symbol)>-1){\n      let {previous} =this.state;\n      previous.push(this.state.display+symbol)\n      this.setState({previous, nextDisplay:true});\n    }\n\n    else  {\n      if(this.state.display ==='0' || this.state.nextDisplay){\n        this.setState({display: symbol, nextDisplay:false});\n      }\n      else\n      this.setState({display: this.state.display + symbol});\n    }\n      \n  }\n\n  calculate = (symbol) =>{\n    let {display , previous, nextDisplay} = this.state;\n    if(previous.length>0){\n      display= eval( String(this.state.previous[this.state.previous.length-1]+ this.state.display));\n      this.setState({display , previous:[], nextDisplay: false });\n    }\n  }\n\n  render() {\n    const btn=[\n      {symbol:'C', col:3, action:this.reset},\n      {symbol:'/', col:1, action:this.addToDisplay},\n      {symbol:'7', col:1, action:this.addToDisplay},\n      {symbol:'8', col:1, action:this.addToDisplay},\n      {symbol:'9', col:1, action:this.addToDisplay},\n      {symbol:'*', col:1, action:this.addToDisplay},\n      {symbol:'4', col:1, action:this.addToDisplay},\n      {symbol:'5', col:1, action:this.addToDisplay},\n      {symbol:'6', col:1, action:this.addToDisplay},\n      {symbol:'-', col:1, action:this.addToDisplay},\n      {symbol:'1', col:1, action:this.addToDisplay},\n      {symbol:'2', col:1, action:this.addToDisplay},\n      {symbol:'3', col:1, action:this.addToDisplay},\n      {symbol:'+', col:1, action:this.addToDisplay},\n      {symbol:'0', col:2, action:this.addToDisplay},\n      {symbol:'.', col:1, action:this.addToDisplay},\n      {symbol:'=', col:1, action:this.calculate},\n    ];\n    return (\n      <div>\n        \n        <input className=\"result\" type=\"text\" value={this.state.display}></input>\n        {\n          this.state.previous.length>0 ? <sub className=\"last\"> {this.state.previous[this.state.previous.length-1]} </sub>: null\n        }\n        \n        {\n          btn.map((b,i)=>{\n            return <Button key={i} cust_symbol={b.symbol} cust_col={b.col} cust_action={(symbol)=>b.action(symbol)}/>\n          })\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\r\n\r\nclass custButton extends Component {\r\n    render() {\r\n        return (\r\n            <div className= {`column-${this.props.cust_col}`}>\r\n                <button className=\"calc\" onClick={()=>this.props.cust_action(this.props.cust_symbol)} >{this.props.cust_symbol}</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default custButton;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}